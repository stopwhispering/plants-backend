[tool.poetry]
name = "plants-backend"
version = "0.1.0"
description = "FastAPI-based RESTful Database Application for Tracking Plants"
authors = ["Johannes <stopwhispering314@gmail.com>"]
readme = "README.md"
packages = [{include = "plants"}]

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
fastapi = "^0.92.0"
sqlalchemy = "^2.0.4"
pydantic = {extras = ["dotenv"], version = "^1.10.5"}
asyncpg = "^0.27.0"
aiofiles = "^23.1.0"
piexif = "^1.1.3"
pytz = "^2022.7.1"
alembic = "^1.9.4"
wikidata = "^0.7.0"
pykew = "^0.1.3"
pillow = "^9.4.0"
beautifulsoup4 = "^4.11.2"
numpy = "^1.24.2"
pygbif = "^0.6.2"
python-multipart = "^0.0.5"
pandas = "^1.5.3"
scikit-learn = "^1.2.1"
aiohttp = "^3.8.4"


[tool.poetry.group.dev.dependencies]
pytest = "^7.2.1"
pytest-asyncio = "^0.20.3"
httpx = "^0.23.3"
pre-commit = "^3.1.0"
#black = "^23.1.0"
pylint = "^2.16.2"
ruff = "^0.1.2"
pytest-cov = "^4.0.0"
uvicorn = "^0.20.0"
pydantic-to-typescript = "^1.0.10"
mypy = "^1.0.1"
types-beautifulsoup4 = "^4.11.6.7"
types-aiofiles = "^22.1.0.9"
sqlalchemy = {extras = ["mypy"], version = "^2.0.4"}
#pandas-stubs = "^1.5.3.230214"
pandera = {extras = ["mypy"], version = "^0.13.4"}
types-requests = "^2.28.11.15"
types-pillow = "^9.4.0.17"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

## https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
#[tool.black]
#line-length = 100
#target-version = ["py311"]

#[tool.isort]
[tool.ruff.isort]
#profile = "black"  # not required if using isort via ruff
combine-as-imports = true
required-imports = ["from __future__ import annotations"]

[tool.pytest.ini_options]
# disables debugging pytests
#addopts = "--cov=plants --cov-report term --cov-report=html"
testpaths = [
    "tests"
]

[tool.coverage.run]
# Coverage.py lib is used by pytest-cov to generate coverage reports
# the following is required to make it work after await statements with sqlalchemy
concurrency = ["greenlet"]
omit = []


[tool.coverage.report]
# pytest coverage configuration
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
# rule sources; default: pycodestyle (`E`) and Pyflakes (`F`) codes
select = [
#    "ALL",
    "E",  # pycodestyle
    "F",  # Pyflakes
    "W",  # Warning
    "C90",  # mccabe
    "I",  # isort
    "N",  # pep8-naming
#    "D",  # pydocstyle
    "UP",  # pyupgrade
#    "ANN", # flake8-annotations
    "S",  # flake8-bandit
    "FBT",  # flake8-boolean-trap
    "B",  # flake8-bugbear
    "A",  # flake8-builtins
    "COM",  # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",  # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
    "RSE", # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate       (fix removes commented-out code)
    "PD",  # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",  # Pylint
    "TRY",  # tryceratops
    "NPY",  # NumPy-specific rules
    "RUF",  # Ruff-specific rules
]
ignore = [
    "COM812",  # trailing comma missing
    "D205",  # 1 blank line required between summary line and description
    "D100",  # Missing docstring in public module
    "G004",  # Logging statement uses f-string
    "PLW2901",  # Outer for loop variable overwritten by inner assignment target
    "TRY003",  # Avoid specifying long messages outside the exception class
    "B905",  # `zip()` without an explicit `strict=` parameter
#    "ISC001",  # Implicitly concatenated string literals (conflicts with black)
    "PLR2004",  # magic numbers, i.e. literals

    # to be checked every once and then
    "ERA001",  # commented-out code
    "UP007",  #  X | None instead of Optional[x] --> wait for Pydantic 2

    # not compatible with ruff format
    'COM819', 'E501', 'Q000', 'Q001', 'Q002', 'Q003', 'ISC001',

    'PD901',  # allow 'df' as variable name

    'W191', # conflicts with ruff check
]
#fixable = ["E", "F"]
#unfixable = [
#    "ERA001",  # commented-out code
#]
exclude = [
    "./.pytest_cache",
    "./alembic",
    "./.git",
    "./plants/scripts",
#    "./ml_helpers"  # to be refactored anyway
]
# Allow ambiguous unicode characters
allowed-confusables = ["Ã—"]
line-length = 100
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py311"
respect-gitignore = true  # default: true

[tool.ruff.flake8-bugbear]
# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query", "pathlib.Path"]

[tool.ruff.flake8-builtins]
# A003 Exceptions
builtins-ignorelist = ["id", "format"]

[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment (N805)
classmethod-decorators = ["pydantic.validator", "classmethod"]

[tool.ruff.per-file-ignores]
# assert, missing type annotations + docstrings, constant numbers,
"./tests/*" = [
    "S101", "ANN001", "ANN201",
    "D100", "D103",  # type annotations + docstrings
#    "PLR2004",  # magic numbers
    "S101"  # assert
]
# move ... type-checking block (conflicts w. fastapi dep. inj,)
'routes.py' = ["TCH001", "TCH002", "TCH003" ]
'*schemas.py' = ["TCH001", "TCH002", "TCH003" ]
'base_schema.py' = ["TCH001", "TCH002", "TCH003" ]
'config_values.py' = ["TCH001", "TCH002", "TCH003" ]
'dependencies.py' = ["TCH001", "TCH002", "TCH003" ]
'models.py' = ["TCH001", "TCH002", "TCH003" ]
'api_typedefs.py' = [
    "N815",  # mixedCase
    "TCH002",  # move ... into a type-checking block (not supported by fastapi dep inj)
    "TCH003",  # move ... into a type-checking block (not supported by fastapi dep inj)
]
'./scripts/*' = [
    "T201",  # print statements
    "F401",  # unused imports
    "SLF001",  # private-member access
]
'evaluate_columns.py' = [
    "T201",  # print statements
]

#[tool.ruff.pylint]
## allow literals (magic numbers) (PLR2004)
#allow-magic-value-types = ["int"]

[tool.mypy]
python_version = "3.11"
strict = true
plugins = [
    "sqlalchemy.ext.mypy.plugin",
    "pydantic.mypy",
    "numpy.typing.mypy_plugin",
    "pandera.mypy"
]
exclude = ["plants/scripts/*", "backup",
#    "ml_helpers",
    "venv*", "alembic",
    "local*", "scripts/*"]
#mypy_path = "./stubs"

[[tool.mypy.overrides]]
module = "sklearn.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pykew.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pygbif.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "piexif.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pydantic2ts.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "scipy.sparse.*"
ignore_missing_imports = true

[tool.pylint]
good-names="id, db, x, y, dt, ts, err, tag"
max-line-length = 100
disable = [
    "missing-docstring",
    "empty-docstring",
    "logging-fstring-interpolation",
    "fixme",
    "too-few-public-methods",  # too many not useful findings
    "protected-access",  # covered by other tools
    "no-self-argument",  # covered by other tools
    "too-many-branches",  # covered by other tools
    "bare-except",  # covered by other tools
    "duplicate-code",  # no useful findings
]
extension-pkg-whitelist = "pydantic"
#jobs=0  # buggy, omits lots of findings
ignore-patterns = "ml_*"
ignore-paths="ml_*"
load-plugins= [
    "pylint.extensions.bad_builtin",
    "pylint.extensions.dict_init_mutate",
    "pylint.extensions.dunder",
    "pylint.extensions.check_elif",
    "pylint.extensions.empty_comment",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.redefined_loop_name",
    "pylint.extensions.set_membership",
    "pylint.extensions.typing",
    "pylint.extensions.while_used",
    ]
